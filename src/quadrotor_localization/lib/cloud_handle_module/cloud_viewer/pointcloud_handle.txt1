// /**
// *****************************************************************************
// *  Copyright (C), 2023-2026,robotics gang
// *  @file    pointcloud_handle.cpp
// *  @brief  点云处理
// *  @author  robotics gang
// *  @date    2023/7/11
// *  @version v0.1
// *  @ref  github.com/gaoxiang12/slam_in_autonomous_driving
// ****************************************************************************
// */

// #include "pointcloud_handle.hpp"



// /**
//  * @brief  点云处理初始化 重载2
//  * @param source_path source点云 pcd的路径
//  * @param target_path  target点云 pcd的路径
//  * @return
//  * @note
//  */
// PointCloudHandle::PointCloudHandle(const std::string source_path, const std::string target_path)
// {
//     _cloud_source_ptr.reset(new pcl::PointCloud<pcl::PointXYZI>);
//     _cloud_target_ptr.reset(new pcl::PointCloud<pcl::PointXYZI>);

//     if (source_path.empty() || target_path.empty())
//     {
//         std::cout << "输入点云路径错误" << std::endl;
//     }
//     pcl::io::loadPCDFile(source_path, *_cloud_source_ptr);
//     pcl::io::loadPCDFile(target_path, *_cloud_target_ptr);

//     if (_cloud_source_ptr->empty() || _cloud_target_ptr->empty())
//     {
//         std::cout << "输入点云无效" << std::endl;
//     }
//     else
//     {
//         std::cout << "source点云规模" << _cloud_source_ptr->points.size() << std::endl;
//         std::cout << "target点云规模" << _cloud_target_ptr->points.size() << std::endl;
//     }

//     this->VoxelGridFilter(this->_cloud_source_ptr, 0.5);
//     this->VoxelGridFilter(this->_cloud_target_ptr, 0.5);
//     /*for debug*/
//     std::cout << "滤波后source点云规模" << _cloud_source_ptr->points.size() << std::endl;
//     std::cout << "滤波后target点云规模" << _cloud_target_ptr->points.size() << std::endl;
// }

// /**
//  * @brief  点云处理初始化 重载3
//  * @param cloud_source_ptr source点云指针
//  * @return
//  * @note
//  */
// PointCloudHandle::PointCloudHandle::PointCloudHandle(pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_source_ptr)
// {
//     _cloud_source_ptr.reset(new pcl::PointCloud<pcl::PointXYZI>);
//     _cloud_source_ptr = cloud_source_ptr;
// }
// /**
//  * @brief  点云处理初始化 重载4
//  * @param cloud_source_ptr source点云指针
//  * @param cloud_target_ptr target点云指针
//  * @return
//  * @note
//  */
// PointCloudHandle::PointCloudHandle(pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_source_ptr,
//                                    pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_target_ptr)
// {
//     _cloud_source_ptr.reset(new pcl::PointCloud<pcl::PointXYZI>);
//     _cloud_target_ptr.reset(new pcl::PointCloud<pcl::PointXYZI>);

//     _cloud_source_ptr = cloud_source_ptr;
//     _cloud_target_ptr = cloud_target_ptr;
// }

// /**
//  * @brief  析构
//  * @param none
//  * @return
//  * @note
//  */
// PointCloudHandle::~PointCloudHandle()
// {
// }







   


// /**
//  * @brief 打印调试
//  * @param
//  * @return void
//  * @note friend  重载<<
//  */
// std::ostream &operator<<(std::ostream &o, const PointCloudHandle &s)
// {
//     if (s._cloud_source_ptr->empty())
//     {
//         o << "未输入原始点云" << std::endl;
//     }
//     if (s._cloud_target_ptr->empty())
//     {
//         o << "未输入目标点云" << std::endl;
//     }

//     return o;
// }

// /**
//  * @brief 找最近邻 重载1
//  * @param cloud_ptr
//  * @param point
//  * @return
//  * @note 距离point最近的cloud_ptr对应的下标
//  */
// int PointCloudHandle::find_neighbour_index(pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_ptr, const pcl::PointXYZI& point)
// {
//     return std::min_element(cloud_ptr->points.begin(), cloud_ptr->points.end(),
//                             [&point](const pcl::PointXYZI &pt1, const pcl::PointXYZI &pt2) -> bool {
//                                 return (pt1.getVector3fMap() - point.getVector3fMap()).squaredNorm() <
//                                        (pt2.getVector3fMap() - point.getVector3fMap()).squaredNorm();
//                             }) -
//            cloud_ptr->points.begin();
// }

// /**
//  * @brief 找最近邻 重载2
//  * @param
//  * @return
//  * @note
//  */
